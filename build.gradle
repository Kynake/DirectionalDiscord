buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = 'https://files.minecraftforge.net/maven' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '0.2.0'
group = 'kynake' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'directionaldiscord'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    jcenter()
}

// Forge
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    // Latest Mappings can be found by running  '!mcpv' at the 'bot-commands' channel on the Forge Discord (https://discord.gg/UvedJ9m)
    mappings channel: 'snapshot', version: '20201028-1.16.3'

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                directionaldiscord {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                directionaldiscord {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'directionaldiscord', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                directionaldiscord {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Shadow
configurations {
    embed
    compile.extendsFrom(embed)
}

shadowJar {
    classifier ''
    configurations = [project.configurations.embed]

    def shadowPrefix = "${project.group}.shadow"
    // TODO really handle these relocations

    // JDA lib Relocations
    relocate "club.minnced",                    "${shadowPrefix}.club.minnced"
    relocate "com.fasterxml",                   "${shadowPrefix}.com.fasterxml"
    relocate "com.iwebpp",                      "${shadowPrefix}.com.iwebpp"
    relocate "com.neovisionaries",              "${shadowPrefix}.com.neovisionaries"
    relocate "gnu",                             "${shadowPrefix}.gnu"
    relocate "javax.annotation",                "${shadowPrefix}.javax.annotation"
    relocate "kotlin",                          "${shadowPrefix}.kotlin"
    relocate "okhttp3",                         "${shadowPrefix}.okhttp"
    relocate "okio",                            "${shadowPrefix}.okio"
    relocate "org.apache.commons.collections4", "${shadowPrefix}.org.apache.commons.collections4"
    relocate "org.intellij",                    "${shadowPrefix}.org.intellij"
    relocate "org.jetbrains",                   "${shadowPrefix}.org.jetbrains"
    relocate "org.slf4j",                       "${shadowPrefix}.org.slf4j"
    relocate "tomp2p",                          "${shadowPrefix}.tomp2p"
    relocate "net.dv8tion",                     "${shadowPrefix}.net.dv8tion"

    // relocate("com.sun.jna", "${shadowPrefix}.com.sun.jna") { // Seem to not be working
    //     include '**.*.class'
    // }

}

reobf {
    shadowJar {
        dependsOn tasks.createMcpToSrg
        mappings = tasks.createMcpToSrg.outputs.files.singleFile
    }
}

artifacts {
    archives shadowJar
}

// Dependencies
dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.22'

    // JDA
    embed('net.dv8tion:JDA:4.2.0_227') {
        exclude group: 'okhttp3', module: 'okhttp'
    }
    embed 'com.squareup.okhttp3:okhttp:4.9.0'
    embed 'club.minnced:discord-webhooks:0.5.4'

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Manifest
jar {
    manifest {
        attributes([
            'Maven-Artifact'           : "${project.group}:${project.archivesBaseName}:${project.version}",
            'Specification-Title'      : "directionaldiscord",
            'Specification-Vendor'     : "kynake",
            'Specification-Version'    : "1", // We are version 1 of ourselves
            'Implementation-Title'     : project.name,
            'Implementation-Version'   : "${version}",
            'Implementation-Vendor'    :"kynake",
            'Implementation-Timestamp' : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}